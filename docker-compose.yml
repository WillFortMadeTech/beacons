version: "3.9"

##
# A containerised local development environment similar to the deployed environment
#
# ! Requires Docker Desktop to be configured with 4GB of RAM !
##

services:
  postgres:
    image: library/postgres:12
    environment:
      POSTGRES_USER: beacons_service
      POSTGRES_PASSWORD: password
      POSTGRES_DB: beacons
    ports:
      - "5432:5432"

  opensearch:
    image: opensearchproject/opensearch:1.1.0
    environment:
      - discovery.type=single-node
    volumes:
      - ./opensearch/opensearch.dev.yml:/usr/share/opensearch/config/opensearch.yml
    expose:
      - 9200 # Core OpenSearch queries
      - 9600 # Performance Analyzer queries
    ports: # Exposed only for local development with a non-Dockerized Spring; these ports are private when deployed
      - "9200:9200"
      - "9600:9600"

  # Client queries to OpenSearch from the public internet are authenticated using Azure AD and proxied through to
  # OpenSearch for security.
  opensearch-proxy:
    build: ./opensearch/proxy
    image: beacons-opensearch-proxy
    ports:
      - "8081:80"
    environment:
      OPENSEARCH_DOMAIN: "opensearch:9200"
      OPENSEARCH_PROTOCOL: "http"
      LOCAL: "true"
      APPLICATION_CREDENTIALS_BASE64: "" # Not used in local development

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:1.1.0
    ports:
      - "5601:5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch-proxy"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: "true"

  service:
    build:
      context: ./service
    image: beacons-service
    ports:
      - "8080:8080"
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/beacons
      SPRING_PROFILES_ACTIVE: dev,seed
      OPENSEARCH_ENDPOINT: opensearch
      EXPORT_DIRECTORY: /var/export
    volumes:
      - /tmp/beacons:/var/export

  backoffice:
    build:
      context: ./backoffice
      args:
        feedback_email_addresses: dev@mcga.gov.uk,dev@madetech.com
    image: beacons-backoffice
    ports:
      - "3001:80"
    environment:
      AZURE_AD_TENANT_ID: "513fb495-9a90-425b-a49a-bc6ebe2a429e"
      AZURE_AD_CLIENT_ID: "5cdcbb41-958a-43b6-baa1-bbafd80b4f70"
      REACT_APP_FEEDBACK_EMAIL_ADDRESSES: "x@y.com,y@z.com"

  redis:
    image: redis:6
    ports:
      - "6379:6379"

  webapp:
    build:
      context: ./webapp
    environment:
      API_URL: http://service:8080/spring-api
      WEBAPP_CLIENT_ID: 1ccbe14d-00e3-43ac-a434-8f7a38e03366
      AAD_API_ID: 5cdcbb41-958a-43b6-baa1-bbafd80b4f70
      AAD_TENANT_ID: 513fb495-9a90-425b-a49a-bc6ebe2a429e
      REDIS_URI: redis://redis:6379
      NEXTAUTH_URL: http://localhost:3000
      AZURE_B2C_CLIENT_ID: 43557393-7cd2-416e-8bb2-96283dbdbcbc
      AZURE_B2C_TENANT_NAME: B2CMCGA
      AZURE_B2C_TENANT_ID: da0cadc6-44c5-4830-bb04-82bddfd2f040
      AZURE_B2C_LOGIN_FLOW: B2C_1_login_beacons
      AZURE_B2C_SIGNUP_FLOW: B2C_1_signup_beacons
      AZURE_B2C_CLIENT_SECRET: ${AZURE_B2C_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      GOV_NOTIFY_FEEDBACK_EMAIL_ADDRESS: ${GOV_NOTIFY_FEEDBACK_EMAIL_ADDRESS}
      GOV_NOTIFY_API_KEY: ${GOV_NOTIFY_API_KEY}
      WEBAPP_CLIENT_SECRET: ${WEBAPP_CLIENT_SECRET}
    ports:
      - "3000:3000"
    links:
      - opensearch
      - postgres
    depends_on:
      - opensearch
      - postgres
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8080/spring-api/actuator/health",
        ]
      interval: 10s
      timeout: 10s
      retries: 12
    restart: on-failure
