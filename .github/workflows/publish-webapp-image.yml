name: Publish a version of the Webapp image to ECR

on:
  workflow_call:
    inputs:
      tag:
        description: The tag to add to the published Docker image, e.g. "v1.0.1"
        required: true
        type: string
      registry_url:
        description: The URL of the registry where the image should be published
        required: true
        type: string
      repository_name:
        description: The name of the image to be published
        required: false
        default: beacons-webapp
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

defaults:
  run:
    working-directory: webapp

jobs:
  install_dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-node@v2.4.0
        with:
          node-version: "14"
      - name: Install npm dependencies
        run: npm ci
        env:
          CYPRESS_INSTALL_BINARY: 0
      - name: Cache dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "webapp/**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('webapp/**/package-lock.json') }}

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-node@v2.4.0
        with:
          node-version: "14"
      - name: Restore cache
        uses: actions/cache@v2.1.6
        with:
          path: "webapp/**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('webapp/**/package-lock.json') }}
      - name: Run tests
        run: npm run test

  UI_tests:
    name: UI tests
    runs-on: ubuntu-latest
    needs: install_dependencies
    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379
    env:
      WEBAPP_CLIENT_SECRET: ${{ secrets.WEBAPP_CLIENT_SECRET }}
      SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Copy env vars
        run: cp .env.example .env.local
      - name: Run Cypress UI tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: webapp
          spec: cypress/integration/**/*.spec.ts
          browser: chrome
          start: npm run start
          build: npm run build
          wait-on: "http://localhost:3000"
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots/

  lint_check:
    name: Lint check
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-node@v2.4.0
        with:
          node-version: "14"
      - name: Restore cache
        uses: actions/cache@v2.1.6
        with:
          path: "webapp/**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('webapp/**/package-lock.json') }}
      - name: Run linter
        run: npm run lint

  prettier_check:
    name: Prettier check
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-node@v2.4.0
        with:
          node-version: "14"
      - name: Restore cache
        uses: actions/cache@v2.1.6
        with:
          path: "webapp/**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('webapp/**/package-lock.json') }}
      - name: Run prettier
        run: npm run format:check

  docker_lint:
    name: Docker lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Docker lint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: webapp/Dockerfile

  codeql_check:
    name: CodeQL check
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  docker_build:
    name: Build and Push Docker image
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      [
        install_dependencies,
        unit_tests,
        UI_tests,
        lint_check,
        prettier_check,
        docker_lint,
        codeql_check,
      ]

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
      - name: Login to ECR
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ inputs.registry_url }}
          username: ${{ secrets.aws_access_key_id }}
          password: ${{ secrets.aws_secret_access_key }}
      - name: Build and Push
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          tags: ${{ inputs.registry_url }}/${{ inputs.repository_name }}:${{ inputs.tag }}
