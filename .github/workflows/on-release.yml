name: On release

on:
  release:
    types:
      - prereleased # Deploy to staging environment
      - released # Require approval, then deploy to production environment

jobs:
  codeql:
    name: CodeQL check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          config-file: .github/codeql/codeql-config.yml
          languages: java, typescript
      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: 11
      - name: Compile code
        run: ./service/gradlew clean assemble
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  unit_tests:
    if: ${{ github.event.release.prereleased }}
    name: Unit test CloudWatch -> Trello Lambda
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-node@v2.4.0
        with:
          node-version: "14"
      - name: Run tests
        run: |
          cd terraform/trello-lambda
          npm ci
          npm run test

  terraform_lint:
    if: ${{ github.event.release.prereleased }}
    name: Terraform Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Lint
        run: terraform fmt --recursive --check

  prettier_check:
    if: ${{ github.event.release.prereleased }}
    name: Prettier check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Prettier check
        run: |
          npm ci
          npm run format:check

  publish_webapp_image:
    if: ${{ github.event.release.prereleased }}
    name: Webapp
    uses: ./.github/workflows/publish-webapp-image.yml
    with:
      tag: ${{ github.event.release.tag_name }}

  publish_service_image:
    if: ${{ github.event.release.prereleased }}
    name: Service
    uses: ./.github/workflows/publish-service-image.yml
    with:
      tag: ${{ github.event.release.tag_name }}

  publish_opensearch_proxy_image:
    if: ${{ github.event.release.prereleased }}
    name: OpenSearch proxy
    uses: ./.github/workflows/publish-opensearch-proxy-image.yml
    with:
      tag: ${{ github.event.release.tag_name }}

  end_to_end_tests:
    if: ${{ github.event.release.prereleased }}
    name: End-to-end tests
    needs:
      [
        publish_webapp_image,
        publish_service_image,
        publish_opensearch_proxy_image,
      ]
    uses: ./.github/workflows/end-to-end-tests.yml
    with:
      service-image-tag: ${{ github.event.release.tag_name }}

  deploy_staging:
    if: ${{ github.event.release.prereleased }}
    name: Deploy staging
    needs: [end_to_end_tests, terraform_lint, prettier_check]
    uses: ./.github/workflows/deploy.yml
    with:
      environment: staging
      trello_list_id: ${{ secrets.TRELLO_LIST_ID }}
      alert_email_address: ${{ secrets.ALERT_EMAIL_ADDRESS }}
      opensearch_proxy_image_tag: ${{ secrets.OPENSEARCH_PROXY_IMAGE_TAG }}
      db_password: ${{ secrets.DB_PASSWORD }}
      gov_notify_api_key: ${{ secrets.GOV_NOTIFY_API_KEY }}
      webapp_azure_ad_client_secret: ${{ secrets.WEBAPP_CLIENT_SECRET }}
      webapp_azure_b2c_client_secret: ${{ secrets.AZURE_B2C_CLIENT_SECRET }}
      webapp_azure_b2c_next_auth_jwt_secret: ${{ secrets.JWT_SECRET }}
      service_basic_auth_username: ${{ secrets.SERVICE_BASIC_AUTH_USERNAME }}
      service_basic_auth_password: ${{ secrets.SERVICE_BASIC_AUTH_PASSWORD }}
      aws_account_number: ${{ secrets.AWS_ACCOUNT_NUMBER }}
      trello_api_key: ${{ secrets.TRELLO_API_KEY }}
      trello_token: ${{ secrets.TRELLO_TOKEN }}
      opensearch_master_user_name: ${{ secrets.OPENSEARCH_USERNAME }}
      opensearch_master_user_password: ${{ secrets.OPENSEARCH_PASSWORD }}
      opensearch_dashboards_sso_client_secret: ${{ secrets.OPENSEARCH_DASHBOARDS_SSO_CLIENT_SECRET }}

  deploy_production:
    if: ${{ github.event.release.released }}
    needs: [deploy_staging, codeql]
    name: Deploy production
    runs-on: ubuntu-latest
    steps:
      - run: echo "I would have deployed release with tag ${{ github.event.release.tag_name }} to production"
