name: CI/CD Pipeline

on: push

jobs:
  unit_test:
    name: Unit test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Unit tests
        run: ./gradlew clean test

  integration_test:
    name: Integration test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: beacons-service
          POSTGRES_DB: beacons
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Integration tests
        run: ./gradlew clean integrationTest
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/beacons

  prettier_check:
    name: Prettier check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install npm dependencies
        run: npm ci
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run prettier
        run: npm run format:check

  docker_lint:
    name: Docker lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Docker lint
        uses: brpaz/hadolint-action@v1.3.1

  docker_build:
    name: Build and Push Docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: REF=${GITHUB_REF#refs/heads/} && arrREF=(${REF//// }) && echo "##[set-output name=branch;]$(echo ${arrREF[-1]})"
        id: extract_branch
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.AWS_ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ steps.extract_branch.outputs.branch }}

  codeql_check:
    name: CodeQL check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Compile code
        run: ./gradlew clean assemble
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
